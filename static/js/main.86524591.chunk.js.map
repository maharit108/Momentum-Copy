{"version":3,"sources":["Components/Time.js","Components/Weather.js","ApiCalls/apiCall.js","Components/Quotes.js","App.js","index.js"],"names":["Time","state","time","moment","format","this","update","setInterval","setState","clearInterval","ampm","split","timeHr","timeGreet","parseInt","className","Component","Weather","sendData","cityName","weatherkey","icons","clear","rain","storm","snow","mist","clouds","temp","climate","axios","url","method","then","res","data","main","weather","catch","console","error","weatherIcon","Quotes","quote","author","quoteText","quoteAuthor","App","imgUrl","imgApiId","urls","regular","mainStyle","alignItems","backgroundImage","backgroundPosition","backgroundSize","display","flexDirection","height","justifyContent","textAlign","style","appMomentum","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.86524591.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport moment from 'moment'\nimport './../styles/time.css'\n\n// Time Component: uses Moment to get time.\nclass Time extends Component {\n  constructor () {\n    super()\n    this.state = {\n      time: moment().format('LT'),\n    }\n  }\n\n  // On Component mount calls for moment time and recalls it every 2 sec.\n  componentDidMount () {\n    this.update = setInterval(() => {\n      this.setState({time: moment().format('LT')})\n    }, 2000)\n  }\n\n  // Clean up before Component Unmount\n  componentWillUnmount () {\n    clearInterval(this.update)\n  }\n\n  render () {\n    const { time } = this.state\n    // Split time so that proper greeting can be selected.\n    const ampm = time.split(' ')\n    const timeHr = ampm[0].split(':')\n\n    let timeGreet = ''\n    if (ampm === 'AM') {\n      timeGreet = 'Good Morning, '\n    } else {\n      if (parseInt(timeHr[0] < 6)) {\n        timeGreet = 'Good Afternoon, '\n      } else {\n        timeGreet = 'Good Evening, '\n      }\n    }\n    return (\n      <div className='mid'>\n        <h1 className='lgTime'>{time}</h1>\n        <h1 className='mdGreet'>{timeGreet} Trevor</h1>\n      </div>\n    )\n  }\n\n}\n\nexport default Time\n","import React, { Component } from 'react';\n\nimport { getWeather } from './../ApiCalls/apiCall.js'\nimport './../styles/weather.css'\n\n// Weather Component to show current weather for the day.\nclass Weather extends Component {\n  constructor () {\n    super()\n    this.state = {\n      // data for API request\n      sendData:{\n        cityName: 'Chicago',\n        weatherkey: 'ee0b3bebd948b8d6f846ca3895a91c64'\n      },\n      icons: {\n        clear: '☀',\n        rain: '️🌧',\n        storm: '⛈',\n        snow: '🌨',\n        mist: '🌫',\n        clouds: '☁',\n      },\n      temp: '',\n      climate: ''\n    }\n  }\n\n  componentDidMount () {\n    getWeather(this.state.sendData)\n      .then(res => this.setState({temp: res.data.main.temp, climate: res.data.weather[0].main}))\n      .catch(console.error)\n  }\n\n  render () {\n    // select icon as per weather update\n    const { temp, climate, sendData, icons } = this.state\n    let weatherIcon = ''\n    if (climate === 'Clear') {\n      weatherIcon = icons.clear\n    } else if (climate === 'Rain' || climate === 'Drizzle') {\n      weatherIcon = icons.rain\n    } else if (climate === 'Thunderstorm') {\n      weatherIcon = icons.rain\n    } else if (climate === 'Snow') {\n      weatherIcon = icons.snow\n    } else if (climate === 'Clouds') {\n      weatherIcon = icons.clouds\n    } else {\n      weatherIcon = icons.mist\n    }\n    return (\n      <header className='rtTop'>\n        <h3 className='mdTemp'>{weatherIcon} {temp}{'\\u00b0'}F</h3>\n        <h3 className='smTemp'>{sendData.cityName}</h3>\n      </header>\n    )\n  }\n\n}\n\nexport default Weather\n","import axios from 'axios'\n\n// get request to  Open Weather API to get current weather of given city.\nexport const getWeather = temp => {\n  return axios({\n    url: `https://api.openweathermap.org/data/2.5/weather?q=${temp.cityName}&units=imperial&appid=${temp.weatherkey}`,\n    method: 'GET'\n  })\n}\n\n// get request to Forismatic API  to get random quotes\nexport const getQuotes = () => {\n  return axios({\n    // add proxy=>https://cors-anywhere.herokuapp.com/ to add CORS header to request, to avoid CORS error.\n    url: 'https://cors-anywhere.herokuapp.com/http://api.forismatic.com/api/1.0/?method=getQuote&key=457653&format=json&lang=en',\n    method: 'GET'\n  })\n}\n\n// get request to Unsplash API to get random images for background images\nexport const getImg = (imgApiId) => {\n  return axios({\n    url: `https://api.unsplash.com/photos/random?client_id=${imgApiId}`,\n    method: 'GET'\n  })\n}\n","import React, { Component } from 'react';\n\nimport { getQuotes } from './../ApiCalls/apiCall.js'\nimport './../styles/quotes.css'\n\n// Quotes component: make API request, gets random quotes and renders them\nclass Quotes extends Component {\n  constructor () {\n    super()\n    this.state = {\n      quote: '',\n      author: ''\n    }\n  }\n  componentDidMount () {\n    getQuotes()\n      .then(res => this.setState({quote: res.data.quoteText, author: res.data.quoteAuthor}))\n      .catch(console.error)\n  }\n\n  render () {\n    const {quote, author } = this.state\n    return (\n      <footer className='footer'>\n        <p className='smFont'>\"{quote}\"</p>\n        <p className='mdFont'>- {author}</p>\n      </footer>\n    )\n  }\n}\n\nexport default Quotes\n","import React, { Component } from 'react';\nimport { getImg } from './ApiCalls/apiCall.js'\n\nimport Time from './Components/Time.js'\nimport Weather from './Components/Weather.js'\nimport Quotes from './Components/Quotes.js'\n\nclass App extends Component {\n  constructor () {\n    super()\n    // State with data for background image request to Unsplash API\n    this.state = {\n      imgUrl: '',\n      imgApiId: 'P8RTljdwjhMTG7xkg6pJkRJ-AZG-9mQY0k5yn-czQwg'\n    }\n  }\n  componentDidMount () {\n    getImg(this.state.imgApiId)\n      .then(res => this.setState({imgUrl: res.data.urls.regular}))\n      .catch(console.error)\n  }\n  render () {\n    // styling for main view\n    const mainStyle = {\n      alignItems: 'center',\n      backgroundImage: `url(${this.state.imgUrl})`,\n      backgroundPosition: 'center',\n      backgroundSize: 'cover',\n      display: 'flex',\n      flexDirection: 'column',\n      height:'100vh',\n      justifyContent: 'space-between',\n      textAlign: 'center'\n    }\n    return (\n      <div style={mainStyle}>\n        <Weather />\n        <Time />\n        <Quotes />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom'\n\nimport './styles/index.css';\nimport App from './App';\n\nconst appMomentum = (\n    <HashRouter>\n      <App />\n    </HashRouter>\n)\n\nReactDOM.render(appMomentum, document.getElementById('root'))\n"],"sourceRoot":""}