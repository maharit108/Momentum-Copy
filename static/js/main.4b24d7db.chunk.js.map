{"version":3,"sources":["Components/Time.js","Components/Weather.js","ApiCalls/apiCall.js","Components/Quotes.js","App.js","index.js"],"names":["Time","state","time","moment","format","this","update","setInterval","setState","clearInterval","ampm","split","timeHr","timeGreet","parseInt","className","Component","Weather","geoGranted","loc","lat","Math","floor","coords","latitude","lon","longitude","temp","sendData","weatherkey","axios","url","method","then","res","data","main","climate","weather","catch","console","error","getCityData","locationKey","process","long","cityName","address","city","locationDenied","cityInput","prompt","geoError","err","log","icons","clear","rain","storm","snow","mist","clouds","geoOption","enableHighAccuracy","timeout","maximumAge","navigator","geolocation","permissions","query","name","getCurrentPosition","weatherIcon","Quotes","quote","author","quoteText","quoteAuthor","App","imgUrl","imgApiId","urls","regular","mainStyle","alignItems","backgroundImage","backgroundPosition","backgroundSize","display","flexDirection","height","justifyContent","textAlign","style","appMomentum","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4b24d7db.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport moment from 'moment'\nimport './../styles/time.css'\n\n// Time Component: uses Moment to get time.\nclass Time extends Component {\n  constructor () {\n    super()\n    this.state = {\n      time: moment().format('LT'),\n    }\n  }\n\n  // On Component mount calls for moment time and recalls it every 2 sec.\n  componentDidMount () {\n    this.update = setInterval(() => {\n      this.setState({time: moment().format('LT')})\n    }, 2000)\n  }\n\n  // Clean up before Component Unmount\n  componentWillUnmount () {\n    clearInterval(this.update)\n  }\n\n  render () {\n    const { time } = this.state\n    // Split time so that proper greeting can be selected.\n    const ampm = time.split(' ')\n    const timeHr = ampm[0].split(':')\n\n    let timeGreet = ''\n    if (ampm === 'AM') {\n      timeGreet = 'Good Morning, '\n    } else {\n      if (parseInt(timeHr[0] < 6)) {\n        timeGreet = 'Good Afternoon, '\n      } else {\n        timeGreet = 'Good Evening, '\n      }\n    }\n    return (\n      <div className='mid'>\n        <h1 className='lgTime'>{time}</h1>\n        <h1 className='mdGreet'>{timeGreet} Trevor</h1>\n      </div>\n    )\n  }\n\n}\n\nexport default Time\n","import React, { Component } from 'react';\n\nimport { getWeatherByCity, getWeatherByLat, getCity } from './../ApiCalls/apiCall.js'\nimport './../styles/weather.css'\n\n// Weather Component to show current weather for the day.\nclass Weather extends Component {\n  constructor () {\n    super()\n    this.state = {\n      cityName: '',\n      lat: null,\n      lon: null,\n      weatherkey: process.env.REACT_APP_WEATHERMAP_KEY,\n      icons: {\n        clear: '☀',\n        rain: '️🌧',\n        storm: '⛈',\n        snow: '🌨',\n        mist: '🌫',\n        clouds: '☁',\n      },\n      temp: '',\n      climate: '',\n      geoOption: {\n        enableHighAccuracy: false,\n        timeout: 5000,\n        maximumAge: 0,\n      }\n    }\n  }\n\n  // permission to get geoLocation granted\n  geoGranted = (loc) => {\n    // Change state to current latitude and longitude\n    this.setState({lat: Math.floor(loc.coords.latitude), lon: Math.floor(loc.coords.longitude)}, () => {\n  \n      // payload\n      let sendData = {\n        weatherkey: this.state.weatherkey,\n        lat: this.state.lat,\n        lon: this.state.lon\n      }\n      // get weather data API call\n      getWeatherByLat(sendData)\n        .then(res => {\n          this.setState({temp: res.data.main.temp, climate: res.data.weather[0].main})\n        })\n        .catch(console.error)\n    })\n\n    // get city name from LocationIQ Api corresponding to current location\n    let getCityData = {\n      locationKey: process.env.REACT_APP_LOC_KEY,\n      lat: loc.coords.latitude,\n      long: loc.coords.longitude\n    }\n    getCity(getCityData)\n      .then(res => this.setState({cityName: res.data.address.city}))\n      .catch(console.error)\n  }\n\n  // if geoLocation is not available or permission denied\n  locationDenied = () => {\n    let cityInput = prompt('Enter the city you are in: ', 'Chicago')\n    this.setState({cityName: cityInput})\n    let sendData = {\n      weatherkey: this.state.weatherkey,\n      cityName: this.state.cityName\n    }\n    getWeatherByCity(sendData)\n      .then(res => this.setState({temp: res.data.main.temp, climate: res.data.weather[0].main}))\n      .catch(console.error)\n  }\n\n  // geoLocation Error\n  geoError = (err) => {\n    console.log('Error:', err)\n    this.locationDenied()\n  }\n\n  componentDidMount () {\n    // Geolocation API\n    if(navigator.geolocation) {\n      navigator.permissions\n          .query({ name: 'geolocation' })\n          .then((res) => {\n              if (res.state === 'granted') {\n                  navigator.geolocation.getCurrentPosition(this.geoGranted)\n              } else if (res.state === 'prompt') {\n                  navigator.geolocation.getCurrentPosition(this.geoGranted, this.geoError, this.state.geoOption)\n              } else if (res.state === 'denied') {\n                  console.log('Location Permission Denied')\n                  this.locationDenied()\n              }\n          })\n    } else {\n      console.log('geoLocation feature not available')\n      this.locationDenied()\n    }\n  }\n\n  render () {\n    // select icon as per weather update\n    const { temp, climate, cityName, icons } = this.state\n    let weatherIcon = ''\n    if (climate === 'Clear') {\n      weatherIcon = icons.clear\n    } else if (climate === 'Rain' || climate === 'Drizzle') {\n      weatherIcon = icons.rain\n    } else if (climate === 'Thunderstorm') {\n      weatherIcon = icons.rain\n    } else if (climate === 'Snow') {\n      weatherIcon = icons.snow\n    } else if (climate === 'Clouds') {\n      weatherIcon = icons.clouds\n    } else {\n      weatherIcon = icons.mist\n    }\n    return (\n      <header className='rtTop'>\n        <h3 className='mdTemp'>{weatherIcon} {temp}{'\\u00b0'}F</h3>\n        <h3 className='smTemp'>{cityName}</h3>\n      </header>\n    )\n  }\n\n}\n\nexport default Weather\n","import axios from 'axios'\n\n// get request to  Open Weather API to get current weather of given city.\nexport const getWeatherByCity = temp => {\n  return axios({\n    url: `https://api.openweathermap.org/data/2.5/weather?q=${temp.cityName}&units=imperial&appid=${temp.weatherkey}`,\n    method: 'GET'\n  })\n}\n\n// get request to  Open Weather API to get current weather of given coordinate.\nexport const getWeatherByLat = temp => {\n  return axios({\n    url: `https://api.openweathermap.org/data/2.5/weather?lat=${temp.lat}&lon=${temp.lon}&units=imperial&appid=${temp.weatherkey}`,\n    method: 'GET'\n  })\n}\n\n// get request to  Open Weather API to get current weather of given coordinate.\nexport const getCity = temp => {\n  return axios({\n    url: `https://us1.locationiq.com/v1/reverse.php?key=${temp.locationKey}&lat=${temp.lat}&lon=${temp.long}&format=json`,\n    method: 'GET'\n  })\n}\n\n// get request to Forismatic API  to get random quotes\nexport const getQuotes = () => {\n  return axios({\n    // add proxy=>https://cors-anywhere.herokuapp.com/ to add CORS header to request, to avoid CORS error.\n    url: 'https://cors-anywhere.herokuapp.com/http://api.forismatic.com/api/1.0/?method=getQuote&key=457653&format=json&lang=en',\n    method: 'GET'\n  })\n}\n\n// get request to Unsplash API to get random images for background images\nexport const getImg = (imgApiId) => {\n  return axios({\n    url: `https://api.unsplash.com/photos/random?client_id=${imgApiId}&orientation=landscape&query=dark-background`,\n    method: 'GET'\n  })\n}\n","import React, { Component } from 'react';\n\nimport { getQuotes } from './../ApiCalls/apiCall.js'\nimport './../styles/quotes.css'\n\n// Quotes component: make API request, gets random quotes and renders them\nclass Quotes extends Component {\n  constructor () {\n    super()\n    this.state = {\n      quote: '',\n      author: ''\n    }\n  }\n  componentDidMount () {\n    getQuotes()\n      .then(res => {\n        this.setState({quote: res.data.quoteText, author: res.data.quoteAuthor})\n      })\n      .catch(console.error)\n  }\n\n  render () {\n    const {quote, author } = this.state\n    return (\n      <footer className='footer'>\n        <p className='smFont'>\"{quote}\"</p>\n        <p className='mdFont'>- {author}</p>\n      </footer>\n    )\n  }\n}\n\nexport default Quotes\n","import React, { Component } from 'react';\nimport { getImg } from './ApiCalls/apiCall.js'\n\nimport Time from './Components/Time.js'\nimport Weather from './Components/Weather.js'\nimport Quotes from './Components/Quotes.js'\n\nclass App extends Component {\n  constructor () {\n    super()\n    // State with data for background image request to Unsplash API\n    this.state = {\n      imgUrl: '',\n      // access key from Unsplash API here\n      imgApiId: process.env.REACT_APP_UNSPLASH_ACCESS\n    }\n  }\n  componentDidMount () {\n    getImg(this.state.imgApiId)\n      .then(res => this.setState({imgUrl: res.data.urls.regular}))\n      .catch(console.error)\n  }\n  render () {\n    // styling for main view\n    const mainStyle = {\n      alignItems: 'center',\n      backgroundImage: `url(${this.state.imgUrl})`,\n      backgroundPosition: 'center',\n      backgroundSize: 'cover',\n      display: 'flex',\n      flexDirection: 'column',\n      height:'100vh',\n      justifyContent: 'space-between',\n      textAlign: 'center'\n    }\n    return (\n      <div style={mainStyle}>\n        <Weather />\n        <Time />\n        <Quotes />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom'\n\nimport './styles/index.css';\nimport App from './App';\n\nconst appMomentum = (\n    <HashRouter>\n      <App />\n    </HashRouter>\n)\n\nReactDOM.render(appMomentum, document.getElementById('root'))\n"],"sourceRoot":""}